{
  "version": 3,
  "sources": ["../../../../../../../packages/animations/src/animation_metadata.ts", "../../../../../../../packages/animations/src/animation_builder.ts", "../../../../../../../packages/animations/src/players/animation_player.ts", "../../../../../../../packages/animations/src/players/animation_group_player.ts", "../../../../../../../packages/animations/src/private_export.ts", "../../../../../../../packages/animations/src/animations.ts", "../../../../../../../packages/animations/public_api.ts", "../../../../../../../packages/animations/index.ts", "../../../../../../../packages/animations/animations.ts", "../../../../../node_modules/src/lib/toastr/toast.directive.ts", "../../../../../node_modules/src/lib/portal/portal.ts", "../../../../../node_modules/src/lib/toastr/toast-ref.ts", "../../../../../node_modules/src/lib/toastr/toastr-config.ts", "../../../../../node_modules/src/lib/portal/dom-portal-host.ts", "../../../../../node_modules/src/lib/overlay/overlay-container.ts", "../../../../../node_modules/src/lib/overlay/overlay-ref.ts", "../../../../../node_modules/src/lib/overlay/overlay.ts", "../../../../../node_modules/src/lib/toastr/toastr.service.ts", "../../../../../node_modules/src/lib/toastr/toast.component.ts", "../../../../../node_modules/src/lib/toastr/toast.provider.ts", "../../../../../node_modules/src/lib/toastr/toastr.module.ts", "../../../../../node_modules/src/lib/toastr/toast-noanimation.component.ts", "../../../../../node_modules/src/lib/ngx-toastr.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a set of CSS styles for use in an animation style as a generic.\n */\nexport interface ɵStyleData {\n  [key: string]: string|number;\n}\n\n/**\n * Represents a set of CSS styles for use in an animation style as a Map.\n */\nexport type ɵStyleDataMap = Map<string, string|number>;\n\n/**\n * Represents animation-step timing parameters for an animation step.\n * @see {@link animate}\n *\n * @publicApi\n */\nexport declare type AnimateTimings = {\n  /**\n   * The full duration of an animation step. A number and optional time unit,\n   * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n   * The default unit is milliseconds.\n   */\n  duration: number,\n  /**\n   * The delay in applying an animation step. A number and optional time unit.\n   * The default unit is milliseconds.\n   */\n  delay: number,\n  /**\n   * An easing style that controls how an animations step accelerates\n   * and decelerates during its run time. An easing function such as `cubic-bezier()`,\n   * or one of the following constants:\n   * - `ease-in`\n   * - `ease-out`\n   * - `ease-in-and-out`\n   */\n  easing: string | null\n};\n\n/**\n * @description Options that control animation styling and timing.\n *\n * The following animation functions accept `AnimationOptions` data:\n *\n * - `transition()`\n * - `sequence()`\n * - `{@link animations/group group()}`\n * - `query()`\n * - `animation()`\n * - `useAnimation()`\n * - `animateChild()`\n *\n * Programmatic animations built using the `AnimationBuilder` service also\n * make use of `AnimationOptions`.\n *\n * @publicApi\n */\nexport declare interface AnimationOptions {\n  /**\n   * Sets a time-delay for initiating an animation action.\n   * A number and optional time unit, such as \"1s\" or \"10ms\" for one second\n   * and 10 milliseconds, respectively.The default unit is milliseconds.\n   * Default value is 0, meaning no delay.\n   */\n  delay?: number|string;\n  /**\n   * A set of developer-defined parameters that modify styling and timing\n   * when an animation action starts. An array of key-value pairs, where the provided value\n   * is used as a default.\n   */\n  params?: {[name: string]: any};\n}\n\n/**\n * Adds duration options to control animation styling and timing for a child animation.\n *\n * @see {@link animateChild}\n *\n * @publicApi\n */\nexport declare interface AnimateChildOptions extends AnimationOptions {\n  duration?: number|string;\n}\n\n/**\n * @description Constants for the categories of parameters that can be defined for animations.\n *\n * A corresponding function defines a set of parameters for each category, and\n * collects them into a corresponding `AnimationMetadata` object.\n *\n * @publicApi\n */\nexport const enum AnimationMetadataType {\n  /**\n   * Associates a named animation state with a set of CSS styles.\n   * See [`state()`](api/animations/state)\n   */\n  State = 0,\n  /**\n   * Data for a transition from one animation state to another.\n   * See `transition()`\n   */\n  Transition = 1,\n  /**\n   * Contains a set of animation steps.\n   * See `sequence()`\n   */\n  Sequence = 2,\n  /**\n   * Contains a set of animation steps.\n   * See `{@link animations/group group()}`\n   */\n  Group = 3,\n  /**\n   * Contains an animation step.\n   * See `animate()`\n   */\n  Animate = 4,\n  /**\n   * Contains a set of animation steps.\n   * See `keyframes()`\n   */\n  Keyframes = 5,\n  /**\n   * Contains a set of CSS property-value pairs into a named style.\n   * See `style()`\n   */\n  Style = 6,\n  /**\n   * Associates an animation with an entry trigger that can be attached to an element.\n   * See `trigger()`\n   */\n  Trigger = 7,\n  /**\n   * Contains a re-usable animation.\n   * See `animation()`\n   */\n  Reference = 8,\n  /**\n   * Contains data to use in executing child animations returned by a query.\n   * See `animateChild()`\n   */\n  AnimateChild = 9,\n  /**\n   * Contains animation parameters for a re-usable animation.\n   * See `useAnimation()`\n   */\n  AnimateRef = 10,\n  /**\n   * Contains child-animation query data.\n   * See `query()`\n   */\n  Query = 11,\n  /**\n   * Contains data for staggering an animation sequence.\n   * See `stagger()`\n   */\n  Stagger = 12\n}\n\n/**\n * Specifies automatic styling.\n *\n * @publicApi\n */\nexport const AUTO_STYLE = '*';\n\n/**\n * Base for animation data structures.\n *\n * @publicApi\n */\nexport interface AnimationMetadata {\n  type: AnimationMetadataType;\n}\n\n/**\n * Contains an animation trigger. Instantiated and returned by the\n * `trigger()` function.\n *\n * @publicApi\n */\nexport interface AnimationTriggerMetadata extends AnimationMetadata {\n  /**\n   * The trigger name, used to associate it with an element. Unique within the component.\n   */\n  name: string;\n  /**\n   * An animation definition object, containing an array of state and transition declarations.\n   */\n  definitions: AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: {params?: {[name: string]: any}}|null;\n}\n\n/**\n * Encapsulates an animation state by associating a state name with a set of CSS styles.\n * Instantiated and returned by the [`state()`](api/animations/state) function.\n *\n * @publicApi\n */\nexport interface AnimationStateMetadata extends AnimationMetadata {\n  /**\n   * The state name, unique within the component.\n   */\n  name: string;\n  /**\n   *  The CSS styles associated with this state.\n   */\n  styles: AnimationStyleMetadata;\n  /**\n   * An options object containing\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation.\n   */\n  options?: {params: {[name: string]: any}};\n}\n\n/**\n * Encapsulates an animation transition. Instantiated and returned by the\n * `transition()` function.\n *\n * @publicApi\n */\nexport interface AnimationTransitionMetadata extends AnimationMetadata {\n  /**\n   * An expression that describes a state change.\n   */\n  expr: string|\n      ((fromState: string, toState: string, element?: any,\n        params?: {[key: string]: any}) => boolean);\n  /**\n   * One or more animation objects to which this transition applies.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates a reusable animation, which is a collection of individual animation steps.\n * Instantiated and returned by the `animation()` function, and\n * passed to the `useAnimation()` function.\n *\n * @publicApi\n */\nexport interface AnimationReferenceMetadata extends AnimationMetadata {\n  /**\n   *  One or more animation step objects.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates an animation query. Instantiated and returned by\n * the `query()` function.\n *\n * @publicApi\n */\nexport interface AnimationQueryMetadata extends AnimationMetadata {\n  /**\n   *  The CSS selector for this query.\n   */\n  selector: string;\n  /**\n   * One or more animation step objects.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n  /**\n   * A query options object.\n   */\n  options: AnimationQueryOptions|null;\n}\n\n/**\n * Encapsulates a keyframes sequence. Instantiated and returned by\n * the `keyframes()` function.\n *\n * @publicApi\n */\nexport interface AnimationKeyframesSequenceMetadata extends AnimationMetadata {\n  /**\n   * An array of animation styles.\n   */\n  steps: AnimationStyleMetadata[];\n}\n\n/**\n * Encapsulates an animation style. Instantiated and returned by\n * the `style()` function.\n *\n * @publicApi\n */\nexport interface AnimationStyleMetadata extends AnimationMetadata {\n  /**\n   * A set of CSS style properties.\n   */\n  styles: '*'|{[key: string]: string | number}|Array<{[key: string]: string | number}|'*'>;\n  /**\n   * A percentage of the total animate time at which the style is to be applied.\n   */\n  offset: number|null;\n}\n\n/**\n * Encapsulates an animation step. Instantiated and returned by\n * the `animate()` function.\n *\n * @publicApi\n */\nexport interface AnimationAnimateMetadata extends AnimationMetadata {\n  /**\n   * The timing data for the step.\n   */\n  timings: string|number|AnimateTimings;\n  /**\n   * A set of styles used in the step.\n   */\n  styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata|null;\n}\n\n/**\n * Encapsulates a child animation, that can be run explicitly when the parent is run.\n * Instantiated and returned by the `animateChild` function.\n *\n * @publicApi\n */\nexport interface AnimationAnimateChildMetadata extends AnimationMetadata {\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates a reusable animation.\n * Instantiated and returned by the `useAnimation()` function.\n *\n * @publicApi\n */\nexport interface AnimationAnimateRefMetadata extends AnimationMetadata {\n  /**\n   * An animation reference object.\n   */\n  animation: AnimationReferenceMetadata;\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates an animation sequence.\n * Instantiated and returned by the `sequence()` function.\n *\n * @publicApi\n */\nexport interface AnimationSequenceMetadata extends AnimationMetadata {\n  /**\n   *  An array of animation step objects.\n   */\n  steps: AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates an animation group.\n * Instantiated and returned by the `{@link animations/group group()}` function.\n *\n * @publicApi\n */\nexport interface AnimationGroupMetadata extends AnimationMetadata {\n  /**\n   * One or more animation or style steps that form this group.\n   */\n  steps: AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates animation query options.\n * Passed to the `query()` function.\n *\n * @publicApi\n */\nexport declare interface AnimationQueryOptions extends AnimationOptions {\n  /**\n   * True if this query is optional, false if it is required. Default is false.\n   * A required query throws an error if no elements are retrieved when\n   * the query is executed. An optional query does not.\n   *\n   */\n  optional?: boolean;\n  /**\n   * A maximum total number of results to return from the query.\n   * If negative, results are limited from the end of the query list towards the beginning.\n   * By default, results are not limited.\n   */\n  limit?: number;\n}\n\n/**\n * Encapsulates parameters for staggering the start times of a set of animation steps.\n * Instantiated and returned by the `stagger()` function.\n *\n * @publicApi\n **/\nexport interface AnimationStaggerMetadata extends AnimationMetadata {\n  /**\n   * The timing data for the steps.\n   */\n  timings: string|number;\n  /**\n   * One or more animation steps.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n}\n\n/**\n * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * @param name An identifying string.\n * @param definitions  An animation definition object, containing an array of\n * [`state()`](api/animations/state) and `transition()` declarations.\n *\n * @return An object that encapsulates the trigger data.\n *\n * @usageNotes\n * Define an animation trigger in the `animations` section of `@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * @Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript\n * @Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [@.disabled]=\"isDisabled\">\n *       <div [@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '@angular/core';\n *\n * @Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   @HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * @publicApi\n */\nexport function trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata {\n  return {type: AnimationMetadataType.Trigger, name, definitions, options: {}};\n}\n\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * @param timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @returns An object that encapsulates the animation step.\n *\n * @usageNotes\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" }),\n *   style({ background: \"red\" })\n *  ])\n * ```\n *\n * @publicApi\n */\nexport function animate(\n    timings: string|number,\n    styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata|null =\n        null): AnimationAnimateMetadata {\n  return {type: AnimationMetadataType.Animate, styles, timings};\n}\n\n/**\n * @description Defines a list of animation steps to be run in parallel.\n *\n * @param steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the group data.\n *\n * @usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * @publicApi\n */\nexport function group(\n    steps: AnimationMetadata[], options: AnimationOptions|null = null): AnimationGroupMetadata {\n  return {type: AnimationMetadataType.Group, steps, options};\n}\n\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * @param steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the sequence data.\n *\n * @usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in\n *parallel.\n *\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * @publicApi\n **/\nexport function sequence(\n    steps: AnimationMetadata[], options: AnimationOptions|null = null): AnimationSequenceMetadata {\n  return {type: AnimationMetadataType.Sequence, steps, options};\n}\n\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation [`state`](api/animations/state), within an animation\n *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.\n *\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return An object that encapsulates the style data.\n *\n * @usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow an element to animate from\n * a height of 0 up to its full height:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * @publicApi\n **/\nexport function style(tokens: '*'|{[key: string]: string | number}|\n                      Array<'*'|{[key: string]: string | number}>): AnimationStyleMetadata {\n  return {type: AnimationMetadataType.Style, styles: tokens, offset: null};\n}\n\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * @param name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return An object that encapsulates the new state data.\n *\n * @usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * @publicApi\n **/\nexport function state(\n    name: string, styles: AnimationStyleMetadata,\n    options?: {params: {[name: string]: any}}): AnimationStateMetadata {\n  return {type: AnimationMetadataType.State, name, styles, options};\n}\n\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * @param steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @returns An object that encapsulates the keyframes data.\n *\n * @usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n *```\n\n * @publicApi\n */\nexport function keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata {\n  return {type: AnimationMetadataType.Keyframes, steps};\n}\n\n/**\n * Declares an animation transition which is played when a certain specified condition is met.\n *\n * @param stateChangeExpr A string with a specific format or a function that specifies when the\n * animation transition should occur (see [State Change Expression](#state-change-expression)).\n *\n * @param steps One or more animation objects that represent the animation's instructions.\n *\n * @param options An options object that can be used to specify a delay for the animation or provide\n * custom parameters for it.\n *\n * @returns An object that encapsulates the transition data.\n *\n * @usageNotes\n *\n * ### State Change Expression\n *\n * The State Change Expression instructs Angular when to run the transition's animations, it can\n *either be\n *  - a string with a specific syntax\n *  - or a function that compares the previous and current state (value of the expression bound to\n *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise\n *\n * The string format can be:\n *  - `fromState => toState`, which indicates that the transition's animations should occur then the\n *    expression bound to the trigger's element goes from `fromState` to `toState`\n *\n *    _Example:_\n *      ```typescript\n *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))\n *      ```\n *\n *  - `fromState <=> toState`, which indicates that the transition's animations should occur then\n *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa\n *\n *    _Example:_\n *      ```typescript\n *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))\n *      ```\n *\n *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the\n *    element enters or exists the DOM\n *\n *    _Example:_\n *      ```typescript\n *        transition(':enter', [\n *          style({ opacity: 0 }),\n *          animate('500ms', style({ opacity: 1 }))\n *        ])\n *      ```\n *\n *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when\n *    the numerical expression bound to the trigger's element has increased in value or decreased\n *\n *    _Example:_\n *      ```typescript\n *        transition(':increment', query('@counter', animateChild()))\n *      ```\n *\n *  - a sequence of any of the above divided by commas, which indicates that transition's animations\n *    should occur whenever one of the state change expressions matches\n *\n *    _Example:_\n *      ```typescript\n *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([\n *          style({ transform: 'scale(1)', offset: 0}),\n *          style({ transform: 'scale(1.1)', offset: 0.7}),\n *          style({ transform: 'scale(1)', offset: 1})\n *        ]))),\n *      ```\n *\n * Also note that in such context:\n *  - `void` can be used to indicate the absence of the element\n *  - asterisks can be used as wildcards that match any state\n *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is\n *    equivalent to `:leave`)\n *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match\n *    _truthy_ and _falsy_ values)\n *\n * <div class=\"alert is-helpful\">\n *\n *  Be careful about entering end leaving elements as their transitions present a common\n *  pitfall for developers.\n *\n *  Note that when an element with a trigger enters the DOM its `:enter` transition always\n *  gets executed, but its `:leave` transition will not be executed if the element is removed\n *  alongside its parent (as it will be removed \"without warning\" before its transition has\n *  a chance to be executed, the only way that such transition can occur is if the element\n *  is exiting the DOM on its own).\n *\n *\n * </div>\n *\n * ### Animating to a Final State\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no `style` data, that step is automatically considered the final animation arc,\n * for the element to reach the final state, in such case Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n *\n * ### Usage Examples\n *\n *  - Transition animations applied based on\n *    the trigger's expression value\n *\n *   ```HTML\n *   <div [@myAnimationTrigger]=\"myStatusExp\">\n *    ...\n *   </div>\n *   ```\n *\n *   ```typescript\n *   trigger(\"myAnimationTrigger\", [\n *     ..., // states\n *     transition(\"on => off, open => closed\", animate(500)),\n *     transition(\"* <=> error\", query('.indicator', animateChild()))\n *   ])\n *   ```\n *\n *  - Transition animations applied based on custom logic dependent\n *    on the trigger's expression value and provided parameters\n *\n *    ```HTML\n *    <div [@myAnimationTrigger]=\"{\n *     value: stepName,\n *     params: { target: currentTarget }\n *    }\">\n *     ...\n *    </div>\n *    ```\n *\n *    ```typescript\n *    trigger(\"myAnimationTrigger\", [\n *      ..., // states\n *      transition(\n *        (fromState, toState, _element, params) =>\n *          ['firststep', 'laststep'].includes(fromState.toLowerCase())\n *          && toState === params?.['target'],\n *        animate('1s')\n *      )\n *    ])\n *    ```\n *\n * @publicApi\n **/\nexport function transition(\n    stateChangeExpr: string|\n    ((fromState: string, toState: string, element?: any, params?: {[key: string]: any}) => boolean),\n    steps: AnimationMetadata|AnimationMetadata[],\n    options: AnimationOptions|null = null): AnimationTransitionMetadata {\n  return {type: AnimationMetadataType.Transition, expr: stateChangeExpr, animation: steps, options};\n}\n\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * @param steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the animation data.\n *\n * @usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * @publicApi\n */\nexport function animation(\n    steps: AnimationMetadata|AnimationMetadata[],\n    options: AnimationOptions|null = null): AnimationReferenceMetadata {\n  return {type: AnimationMetadataType.Reference, animation: steps, options};\n}\n\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return An object that encapsulates the child animation data.\n *\n * @usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * @publicApi\n */\nexport function animateChild(options: AnimateChildOptions|null = null):\n    AnimationAnimateChildMetadata {\n  return {type: AnimationMetadataType.AnimateChild, options};\n}\n\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * @param animation The reusable animation to start.\n * @param options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return An object that contains the animation parameters.\n *\n * @publicApi\n */\nexport function useAnimation(\n    animation: AnimationReferenceMetadata,\n    options: AnimationOptions|null = null): AnimationAnimateRefMetadata {\n  return {type: AnimationMetadataType.AnimateRef, animation, options};\n}\n\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * @param selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements (not\n *     all elements can be queried via these tokens, see\n *     [Entering and Leaving Elements](#entering-and-leaving-elements))\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return An object that encapsulates the query data.\n *\n * @usageNotes\n *\n * ### Multiple Tokens\n *\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Entering and Leaving Elements\n *\n * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones\n * that can are those that Angular assumes can enter/leave based on their own logic\n * (if their insertion/removal is simply a consequence of that of their parent they\n * should be queried via a different token in their parent's `:enter`/`:leave` transitions).\n *\n * The only elements Angular assumes can enter/leave based on their own logic (thus the only\n * ones that can be queried via the `:enter` and `:leave` tokens) are:\n *  - Those inserted dynamically (via `ViewContainerRef`)\n *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)\n *\n * <div class=\"alert is-helpful\">\n *\n *  Note that elements will be successfully queried via `:enter`/`:leave` even if their\n *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural\n *  directive (e.g. they enter/exit alongside their parent).\n *\n * </div>\n *\n * <div class=\"alert is-important\">\n *\n *  There is an exception to what previously mentioned, besides elements entering/leaving based on\n *  their own logic, elements with an animation trigger can always be queried via `:leave` when\n * their parent is also leaving.\n *\n * </div>\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```typescript\n * @Component({\n *   selector: 'inner',\n *   template: `\n *     <div [@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 }))),\n *        query('.content', animate(1000, style({ opacity: 1 }))),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport function query(\n    selector: string, animation: AnimationMetadata|AnimationMetadata[],\n    options: AnimationQueryOptions|null = null): AnimationQueryMetadata {\n  return {type: AnimationMetadataType.Query, selector, animation, options};\n}\n\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * @param timings A delay value.\n * @param animation One ore more animation steps.\n * @returns An object that encapsulates the stagger data.\n *\n * @usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\n * @Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * @publicApi\n */\nexport function stagger(timings: string|number, animation: AnimationMetadata|AnimationMetadata[]):\n    AnimationStaggerMetadata {\n  return {type: AnimationMetadataType.Stagger, timings, animation};\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE, Inject, inject, Injectable, Renderer2, RendererFactory2, RendererType2, ViewEncapsulation, ɵAnimationRendererType as AnimationRendererType, ɵRuntimeError as RuntimeError,} from '@angular/core';\n\nimport {AnimationMetadata, AnimationOptions, sequence} from './animation_metadata';\nimport {RuntimeErrorCode} from './errors';\nimport {AnimationPlayer} from './players/animation_player';\n\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code> method\n * to create a programmatic animation. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: () => inject(BrowserAnimationBuilder)})\nexport abstract class AnimationBuilder {\n  /**\n   * Builds a factory for producing a defined animation.\n   * @param animation A reusable animation definition.\n   * @returns A factory object that can create a player for the defined animation.\n   * @see {@link animate}\n   */\n  abstract build(animation: AnimationMetadata|AnimationMetadata[]): AnimationFactory;\n}\n\n/**\n * A factory object returned from the\n * <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>\n * method.\n *\n * @publicApi\n */\nexport abstract class AnimationFactory {\n  /**\n   * Creates an `AnimationPlayer` instance for the reusable animation defined by\n   * the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>\n   * method that created this factory and attaches the new player a DOM element.\n   *\n   * @param element The DOM element to which to attach the player.\n   * @param options A set of options that can include a time delay and\n   * additional developer-defined parameters.\n   */\n  abstract create(element: any, options?: AnimationOptions): AnimationPlayer;\n}\n\n@Injectable({providedIn: 'root'})\nexport class BrowserAnimationBuilder extends AnimationBuilder {\n  private animationModuleType = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _nextAnimationId = 0;\n  private _renderer: Renderer2;\n\n  constructor(rootRenderer: RendererFactory2, @Inject(DOCUMENT) doc: Document) {\n    super();\n    const typeData: RendererType2 = {\n      id: '0',\n      encapsulation: ViewEncapsulation.None,\n      styles: [],\n      data: {animation: []},\n    };\n    this._renderer = rootRenderer.createRenderer(doc.body, typeData);\n\n    if (this.animationModuleType === null && !isAnimationRenderer(this._renderer)) {\n      // We only support AnimationRenderer & DynamicDelegationRenderer for this AnimationBuilder\n\n      throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_ANIMATION_BUILDER_INJECTED_WITHOUT_ANIMATIONS,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              'Angular detected that the `AnimationBuilder` was injected, but animation support was not enabled. ' +\n                  'Please make sure that you enable animations in your application by calling `provideAnimations()` or `provideAnimationsAsync()` function.');\n    }\n  }\n\n  override build(animation: AnimationMetadata|AnimationMetadata[]): AnimationFactory {\n    const id = this._nextAnimationId;\n    this._nextAnimationId++;\n    const entry = Array.isArray(animation) ? sequence(animation) : animation;\n    issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n    return new BrowserAnimationFactory(id, this._renderer);\n  }\n}\n\nclass BrowserAnimationFactory extends AnimationFactory {\n  constructor(\n      private _id: number,\n      private _renderer: Renderer2,\n  ) {\n    super();\n  }\n\n  override create(element: any, options?: AnimationOptions): AnimationPlayer {\n    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n  }\n}\n\nclass RendererAnimationPlayer implements AnimationPlayer {\n  public parentPlayer: AnimationPlayer|null = null;\n  private _started = false;\n\n  constructor(\n      public id: number,\n      public element: any,\n      options: AnimationOptions,\n      private _renderer: Renderer2,\n  ) {\n    this._command('create', options);\n  }\n\n  private _listen(eventName: string, callback: (event: any) => any): () => void {\n    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n  }\n\n  private _command(command: string, ...args: any[]): void {\n    issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n  }\n\n  onDone(fn: () => void): void {\n    this._listen('done', fn);\n  }\n\n  onStart(fn: () => void): void {\n    this._listen('start', fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._listen('destroy', fn);\n  }\n\n  init(): void {\n    this._command('init');\n  }\n\n  hasStarted(): boolean {\n    return this._started;\n  }\n\n  play(): void {\n    this._command('play');\n    this._started = true;\n  }\n\n  pause(): void {\n    this._command('pause');\n  }\n\n  restart(): void {\n    this._command('restart');\n  }\n\n  finish(): void {\n    this._command('finish');\n  }\n\n  destroy(): void {\n    this._command('destroy');\n  }\n\n  reset(): void {\n    this._command('reset');\n    this._started = false;\n  }\n\n  setPosition(p: number): void {\n    this._command('setPosition', p);\n  }\n\n  getPosition(): number {\n    return unwrapAnimationRenderer(this._renderer)?.engine?.players[this.id]?.getPosition() ?? 0;\n  }\n\n  public totalTime = 0;\n}\n\nfunction issueAnimationCommand(\n    renderer: Renderer2,\n    element: any,\n    id: number,\n    command: string,\n    args: any[],\n    ): void {\n  renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n\n/**\n * The following 2 methods cannot reference their correct types (AnimationRenderer &\n * DynamicDelegationRenderer) since this would introduce a import cycle.\n */\n\nfunction unwrapAnimationRenderer(\n    renderer: Renderer2,\n    ): {engine: {players: AnimationPlayer[]}}|null {\n  const type = (renderer as unknown as {ɵtype: AnimationRendererType}).ɵtype;\n  if (type === AnimationRendererType.Regular) {\n    return renderer as any;\n  } else if (type === AnimationRendererType.Delegated) {\n    return (renderer as any).animationRenderer;\n  }\n\n  return null;\n}\n\nfunction isAnimationRenderer(renderer: Renderer2): boolean {\n  const type = (renderer as unknown as {ɵtype: AnimationRendererType}).ɵtype;\n  return type === AnimationRendererType.Regular || type === AnimationRendererType.Delegated;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides programmatic control of a reusable animation sequence,\n * built using the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>\n * method which returns an `AnimationFactory`, whose\n * <code>[create](api/animations/AnimationFactory#create)()</code> method instantiates and\n * initializes this interface.\n *\n * @see {@link AnimationBuilder}\n * @see {@link AnimationFactory}\n * @see {@link animate}\n *\n * @publicApi\n */\nexport interface AnimationPlayer {\n  /**\n   * Provides a callback to invoke when the animation finishes.\n   * @param fn The callback function.\n   * @see {@link #finish}\n   */\n  onDone(fn: () => void): void;\n  /**\n   * Provides a callback to invoke when the animation starts.\n   * @param fn The callback function.\n   * @see {@link #play}\n   */\n  onStart(fn: () => void): void;\n  /**\n   * Provides a callback to invoke after the animation is destroyed.\n   * @param fn The callback function.\n   * @see {@link #destroy}\n   * @see {@link #beforeDestroy}\n   */\n  onDestroy(fn: () => void): void;\n  /**\n   * Initializes the animation.\n   */\n  init(): void;\n  /**\n   * Reports whether the animation has started.\n   * @returns True if the animation has started, false otherwise.\n   */\n  hasStarted(): boolean;\n  /**\n   * Runs the animation, invoking the `onStart()` callback.\n   */\n  play(): void;\n  /**\n   * Pauses the animation.\n   */\n  pause(): void;\n  /**\n   * Restarts the paused animation.\n   */\n  restart(): void;\n  /**\n   * Ends the animation, invoking the `onDone()` callback.\n   */\n  finish(): void;\n  /**\n   * Destroys the animation, after invoking the `beforeDestroy()` callback.\n   * Calls the `onDestroy()` callback when destruction is completed.\n   */\n  destroy(): void;\n  /**\n   * Resets the animation to its initial state.\n   */\n  reset(): void;\n  /**\n   * Sets the position of the animation.\n   * @param position A 0-based offset into the duration, in milliseconds.\n   */\n  setPosition(position: number): void;\n  /**\n   * Reports the current position of the animation.\n   * @returns A 0-based offset into the duration, in milliseconds.\n   */\n  getPosition(): number;\n  /**\n   * The parent of this player, if any.\n   */\n  parentPlayer: AnimationPlayer|null;\n  /**\n   * The total run time of the animation, in milliseconds.\n   */\n  readonly totalTime: number;\n  /**\n   * Provides a callback to invoke before the animation is destroyed.\n   */\n  beforeDestroy?: () => any;\n  /**\n   * @internal\n   * Internal\n   */\n  triggerCallback?: (phaseName: string) => void;\n  /**\n   * @internal\n   * Internal\n   */\n  disabled?: boolean;\n}\n\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see {@link animate}\n * @see {@link AnimationPlayer}\n * @see {@link ɵAnimationGroupPlayer AnimationGroupPlayer}\n *\n * @publicApi\n */\nexport class NoopAnimationPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _onDestroyFns: Function[] = [];\n  private _originalOnDoneFns: Function[] = [];\n  private _originalOnStartFns: Function[] = [];\n  private _started = false;\n  private _destroyed = false;\n  private _finished = false;\n  private _position = 0;\n  public parentPlayer: AnimationPlayer|null = null;\n  public readonly totalTime: number;\n  constructor(duration: number = 0, delay: number = 0) {\n    this.totalTime = duration + delay;\n  }\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n  onStart(fn: () => void): void {\n    this._originalOnStartFns.push(fn);\n    this._onStartFns.push(fn);\n  }\n  onDone(fn: () => void): void {\n    this._originalOnDoneFns.push(fn);\n    this._onDoneFns.push(fn);\n  }\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n  hasStarted(): boolean {\n    return this._started;\n  }\n  init(): void {}\n  play(): void {\n    if (!this.hasStarted()) {\n      this._onStart();\n      this.triggerMicrotask();\n    }\n    this._started = true;\n  }\n\n  /** @internal */\n  triggerMicrotask() {\n    queueMicrotask(() => this._onFinish());\n  }\n\n  private _onStart() {\n    this._onStartFns.forEach(fn => fn());\n    this._onStartFns = [];\n  }\n\n  pause(): void {}\n  restart(): void {}\n  finish(): void {\n    this._onFinish();\n  }\n  destroy(): void {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      if (!this.hasStarted()) {\n        this._onStart();\n      }\n      this.finish();\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n  reset(): void {\n    this._started = false;\n    this._finished = false;\n    this._onStartFns = this._originalOnStartFns;\n    this._onDoneFns = this._originalOnDoneFns;\n  }\n  setPosition(position: number): void {\n    this._position = this.totalTime ? position * this.totalTime : 1;\n  }\n  getPosition(): number {\n    return this.totalTime ? this._position / this.totalTime : 1;\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer} from './animation_player';\n\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see {@link AnimationPlayer}\n * @see {@link animations/group group}\n *\n */\nexport class AnimationGroupPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _finished = false;\n  private _started = false;\n  private _destroyed = false;\n  private _onDestroyFns: Function[] = [];\n\n  public parentPlayer: AnimationPlayer|null = null;\n  public totalTime: number = 0;\n  public readonly players: AnimationPlayer[];\n\n  constructor(_players: AnimationPlayer[]) {\n    this.players = _players;\n    let doneCount = 0;\n    let destroyCount = 0;\n    let startCount = 0;\n    const total = this.players.length;\n\n    if (total == 0) {\n      queueMicrotask(() => this._onFinish());\n    } else {\n      this.players.forEach(player => {\n        player.onDone(() => {\n          if (++doneCount == total) {\n            this._onFinish();\n          }\n        });\n        player.onDestroy(() => {\n          if (++destroyCount == total) {\n            this._onDestroy();\n          }\n        });\n        player.onStart(() => {\n          if (++startCount == total) {\n            this._onStart();\n          }\n        });\n      });\n    }\n\n    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n  }\n\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n\n  init(): void {\n    this.players.forEach(player => player.init());\n  }\n\n  onStart(fn: () => void): void {\n    this._onStartFns.push(fn);\n  }\n\n  private _onStart() {\n    if (!this.hasStarted()) {\n      this._started = true;\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n    }\n  }\n\n  onDone(fn: () => void): void {\n    this._onDoneFns.push(fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n\n  hasStarted() {\n    return this._started;\n  }\n\n  play() {\n    if (!this.parentPlayer) {\n      this.init();\n    }\n    this._onStart();\n    this.players.forEach(player => player.play());\n  }\n\n  pause(): void {\n    this.players.forEach(player => player.pause());\n  }\n\n  restart(): void {\n    this.players.forEach(player => player.restart());\n  }\n\n  finish(): void {\n    this._onFinish();\n    this.players.forEach(player => player.finish());\n  }\n\n  destroy(): void {\n    this._onDestroy();\n  }\n\n  private _onDestroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._onFinish();\n      this.players.forEach(player => player.destroy());\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n\n  reset(): void {\n    this.players.forEach(player => player.reset());\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n\n  setPosition(p: number): void {\n    const timeAtPosition = p * this.totalTime;\n    this.players.forEach(player => {\n      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n      player.setPosition(position);\n    });\n  }\n\n  getPosition(): number {\n    const longestPlayer =\n        this.players.reduce((longestSoFar: AnimationPlayer|null, player: AnimationPlayer) => {\n          const newPlayerIsLongest =\n              longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n          return newPlayerIsLongest ? player : longestSoFar;\n        }, null);\n    return longestPlayer != null ? longestPlayer.getPosition() : 0;\n  }\n\n  beforeDestroy(): void {\n    this.players.forEach(player => {\n      if (player.beforeDestroy) {\n        player.beforeDestroy();\n      }\n    });\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport {BrowserAnimationBuilder as ɵBrowserAnimationBuilder} from './animation_builder';\nexport {RuntimeErrorCode as ɵRuntimeErrorCode} from './errors';\nexport {AnimationGroupPlayer as ɵAnimationGroupPlayer} from './players/animation_group_player';\n\nexport const ɵPRE_STYLE = '!';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation package.\n */\nexport {AnimationBuilder, AnimationFactory} from './animation_builder';\nexport {AnimationEvent} from './animation_event';\nexport {animate, animateChild, AnimateChildOptions, AnimateTimings, animation, AnimationAnimateChildMetadata, AnimationAnimateMetadata, AnimationAnimateRefMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationOptions, AnimationQueryMetadata, AnimationQueryOptions, AnimationReferenceMetadata, AnimationSequenceMetadata, AnimationStaggerMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, AnimationTriggerMetadata, AUTO_STYLE, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵStyleData, ɵStyleDataMap} from './animation_metadata';\nexport {AnimationPlayer, NoopAnimationPlayer} from './players/animation_player';\n\nexport * from './private_export';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/animations';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n  standalone: true\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n", "import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef!: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean): ComponentRef<any> {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n", "import { Observable, Subject } from 'rxjs';\nimport { OverlayRef } from '../overlay/overlay-ref';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance!: T;\n\n  /** Count of duplicates of this toast */\n  private duplicatesCount = 0;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<void>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<void>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<void>();\n  /** notifies the toast that it should reset the timeouts */\n  private _resetTimeout = new Subject<void>();\n  /** notifies the toast that it should count a duplicate toast */\n  private _countDuplicate = new Subject<number>();\n\n  constructor(private _overlayRef: OverlayRef) {}\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset(): Observable<any> {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate(): Observable<number> {\n    return this._countDuplicate.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout: boolean, countDuplicate: boolean) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n", "import { InjectionToken } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-ref';\n\nexport type ProgressAnimationType = 'increasing' | 'decreasing';\nexport type DisableTimoutType = boolean | 'timeOut' | 'extendedTimeOut';\n\n/**\n * Configuration for an individual toast.\n */\nexport interface IndividualConfig<ConfigPayload = any> {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: DisableTimoutType;\n  /**\n   * toast time to live in milliseconds\n   * default: 5000\n   */\n  timeOut: number;\n  /**\n   * toast show close button\n   * default: false\n   */\n  closeButton: boolean;\n  /**\n   * time to close after a user hovers over toast\n   * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation: ProgressAnimationType;\n\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: ngx-toastr\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on toast message\n   * default: toast-message\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent?: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n\n  /**\n   * Payload to pass to the toast component\n   */\n  payload?: ConfigPayload;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n  [key: string]: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n  /**\n   * display the number of duplicate messages\n   * default: false\n   */\n  countDuplicates: boolean;\n  /**\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\n   * default: false\n   */\n  resetTimeoutOnDuplicate: boolean;\n  /**\n   * consider the title of a toast when checking if duplicate\n   * default: false\n   */\n  includeTitleDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage<ConfigPayload = any> {\n  private _onTap = new Subject<void>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig<ConfigPayload>,\n    public message: string | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap(): void {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<void> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any): void {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\n/** @deprecated use GlobalConfig */\nexport interface GlobalToastrConfig extends GlobalConfig {}\n/** @deprecated use IndividualConfig */\nexport interface IndividualToastrConfig extends IndividualConfig {}\n/** @deprecated use IndividualConfig */\nexport interface ToastrConfig extends IndividualConfig {}\n\nexport const DefaultNoComponentGlobalConfig: GlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  },\n\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n};\n\nexport interface ToastToken {\n  default: GlobalConfig;\n  config: Partial<GlobalConfig>;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n", "import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n", "import { DOCUMENT } from '@angular/common';\nimport { inject, Injectable, OnDestroy } from '@angular/core';\n\n/** Container inside which all toasts will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n  protected _document = inject(DOCUMENT);\n  protected _containerElement!: HTMLElement;\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body\n   * and 'aria-live=\"polite\"'\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    container.setAttribute('aria-live','polite');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n", "import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n", "import { DOCUMENT } from '@angular/common';\nimport { ApplicationRef, ComponentFactoryResolver, inject, Injectable } from '@angular/core';\n\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n@Injectable({ providedIn: 'root' })\nexport class Overlay {\n  private _overlayContainer = inject(OverlayContainer);\n  private _componentFactoryResolver = inject(ComponentFactoryResolver);\n  private _appRef = inject(ApplicationRef);\n  private _document = inject(DOCUMENT);\n\n  // Namespace panes by overlay container\n  private _paneElements: Map<ToastContainerDirective, Record<string, HTMLElement>> = new Map();\n\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(\n    positionClass: string = '',\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)) {\n      this._paneElements.set(overlayContainer as ToastContainerDirective, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass]) {\n      this._paneElements.get(overlayContainer as ToastContainerDirective)![\n        positionClass\n      ] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(\n    positionClass: string,\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n", "import { ComponentRef, Inject, Injectable, Injector, NgZone, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastRef } from './toast-ref';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  ToastToken,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the title of your toast. Stored to prevent duplicates */\n  title: string;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<void>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<void>;\n  /** triggered on toast click */\n  onTap: Observable<void>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer?: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone,\n  ) {\n    this.toastrConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = {\n        ...token.default.iconClasses,\n        ...token.config.iconClasses,\n      };\n    }\n  }\n  /** show toast */\n  show<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning<ConfigPayload = any>(message?: string, title?: string, override: Partial<IndividualConfig<ConfigPayload>> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(title = '', message = '', resetOnDuplicate: boolean, countDuplicates: boolean) {\n    const { includeTitleDuplicates } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number; activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(\n      title,\n      message,\n      this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0,\n      this.toastrConfig.countDuplicates,\n    );\n    if (\n      ((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n      this.toastrConfig.preventDuplicates &&\n      duplicate !== null\n    ) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n\n    /** New injector that contains an instance of `ToastPackage`. */\n    const providers = [{provide: ToastPackage, useValue: toastPackage}];\n    const toastInjector = Injector.create({providers, parent: this._injector});\n\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, config.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal,\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n", "import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n      transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n    ]),\n  ],\n  preserveWhitespaces: false,\n  standalone: true,\n  imports: [NgIf],\n})\nexport class Toast<ConfigPayload = any> implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig<ConfigPayload>;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut') state!: {\n    value: 'inactive' | 'active' | 'removed';\n    params: { easeTime: number | string; easing: string };\n  };\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle(): string | undefined {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in',\n      },\n    };\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (\n      !(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n      this.options.timeOut\n    ) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state, value: 'active' };\n\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = { ...this.state, value: 'removed' };\n    this.outsideTimeout(\n      () => this.toastrService.remove(this.toastPackage.toastId),\n      +this.toastPackage.config.easeTime\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    if (this.options.disableTimeOut !== 'extendedTimeOut') {\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0;\n\n      // disable progressBar\n      clearInterval(this.intervalId);\n      this.width = 0;\n    }\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state.value === 'removed'\n    ) {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.timeout = setTimeout(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.intervalId = setInterval(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: () => any) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\n", "import { DefaultNoComponentGlobalConfig, GlobalConfig, TOAST_CONFIG } from './toastr-config';\nimport { EnvironmentProviders, makeEnvironmentProviders, Provider } from '@angular/core';\nimport { Toast } from './toast.component';\n\nexport const DefaultGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast,\n};\n\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nexport const provideToastr = (config: Partial<GlobalConfig> = {}): EnvironmentProviders => {\n  const providers: Provider[] = [\n    {\n      provide: TOAST_CONFIG,\n      useValue: {\n        default: DefaultGlobalConfig,\n        config,\n      }\n    }\n  ];\n\n  return makeEnvironmentProviders(providers);\n};\n", "import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Toast } from './toast.component';\nimport { DefaultNoComponentGlobalConfig, GlobalConfig, TOAST_CONFIG } from './toastr-config';\nimport { provideToastr } from './toast.provider';\n\n@NgModule({\n  imports: [Toast],\n  exports: [Toast],\n})\nexport class ToastrModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [provideToastr(config)],\n    };\n  }\n}\n\n@NgModule({})\nexport class ToastrComponentlessModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n", "import { NgIf } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\nimport {\n  ApplicationRef,\n  Component,\n  HostBinding,\n  HostListener,\n  NgModule,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  standalone: true,\n  imports: [NgIf]\n})\nexport class ToastNoAnimation implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n\n    return null;\n  }\n\n  /** controls animation */\n  state = 'inactive';\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected appRef: ApplicationRef,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() =>\n      this.toastrService.remove(this.toastPackage.toastId),\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state === 'removed'\n    ) {\n      return;\n    }\n    this.timeout = setTimeout(\n      () => this.remove(),\n      this.options.extendedTimeOut,\n    );\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n  imports: [ToastNoAnimation],\n  exports: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],
  "mappings": "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",
  "names": ["trigger", "name", "definitions", "type", "options", "animate", "timings", "styles", "sequence", "steps", "options", "type", "style", "tokens", "styles", "offset", "state", "name", "transition", "stateChangeExpr", "steps", "options", "type", "expr", "animation", "AnimationBuilder", "factory", "inject", "BrowserAnimationBuilder", "providedIn", "Injectable", "args", "useFactory", "AnimationFactory", "constructor", "rootRenderer", "doc", "animationModuleType", "ANIMATION_MODULE_TYPE", "optional", "_nextAnimationId", "typeData", "id", "encapsulation", "ViewEncapsulation", "None", "styles", "data", "animation", "_renderer", "createRenderer", "body", "isAnimationRenderer", "ɵRuntimeError", "ngDevMode", "build", "entry", "Array", "isArray", "sequence", "issueAnimationCommand", "BrowserAnimationFactory", "ɵfac", "BrowserAnimationBuilder_Factory", "t", "RendererFactory2", "DOCUMENT", "ɵprov", "Inject", "_id", "create", "element", "options", "RendererAnimationPlayer", "parentPlayer", "_started", "totalTime", "_command", "_listen", "eventName", "callback", "listen", "command", "onDone", "fn", "onStart", "onDestroy", "init", "hasStarted", "play", "pause", "restart", "finish", "destroy", "reset", "setPosition", "p", "getPosition", "unwrapAnimationRenderer", "engine", "players", "renderer", "setProperty", "type", "ɵtype", "animationRenderer", "ToastContainerDirective", "el", "constructor", "getContainerElement", "nativeElement", "ElementRef", "selectors", "exportAs", "standalone", "Directive", "args", "selector", "ComponentPortal", "_attachedHost", "component", "viewContainerRef", "injector", "attach", "host", "newestOnTop", "detach", "undefined", "isAttached", "setAttachedHost", "BasePortalHost", "_attachedPortal", "_disposeFn", "portal", "attachComponentPortal", "setDisposeFn", "fn", "ToastRef", "_overlayRef", "componentInstance", "duplicatesCount", "_afterClosed", "Subject", "_activate", "_manualClose", "_resetTimeout", "_countDuplicate", "manualClose", "next", "complete", "manualClosed", "asObservable", "timeoutReset", "countDuplicate", "close", "afterClosed", "isInactive", "isStopped", "activate", "afterActivate", "onDuplicate", "resetTimeout", "ToastPackage", "toastId", "config", "message", "title", "toastType", "toastRef", "_onTap", "_onAction", "subscribe", "triggerTap", "tapToDismiss", "onTap", "triggerAction", "action", "onAction", "DefaultNoComponentGlobalConfig", "maxOpened", "autoDismiss", "preventDuplicates", "countDuplicates", "resetTimeoutOnDuplicate", "includeTitleDuplicates", "iconClasses", "error", "info", "success", "warning", "closeButton", "disableTimeOut", "timeOut", "extendedTimeOut", "enableHtml", "progressBar", "toastClass", "positionClass", "titleClass", "messageClass", "easing", "easeTime", "onActivateTick", "progressAnimation", "TOAST_CONFIG", "InjectionToken", "DomPortalHost", "_hostDomElement", "_componentFactoryResolver", "_appRef", "componentFactory", "resolveComponentFactory", "componentRef", "create", "attachView", "hostView", "detachView", "destroy", "insertBefore", "_getComponentRootNode", "firstChild", "appendChild", "rootNodes", "OverlayContainer", "_document", "inject", "DOCUMENT", "_containerElement", "ngOnDestroy", "parentNode", "removeChild", "_createContainer", "container", "createElement", "classList", "add", "setAttribute", "body", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "OverlayRef", "_portalHost", "Overlay", "_overlayContainer", "ComponentFactoryResolver", "ApplicationRef", "_paneElements", "Map", "overlayContainer", "_createOverlayRef", "getPaneElement", "get", "set", "_createPaneElement", "pane", "id", "_createPortalHost", "ToastrService", "overlay", "_injector", "sanitizer", "ngZone", "toastrConfig", "currentlyActive", "toasts", "previousToastMessage", "index", "token", "default", "show", "override", "type", "_preBuildNotification", "applyConfig", "clear", "toast", "remove", "found", "_findToast", "activeToast", "splice", "length", "p", "findDuplicate", "resetOnDuplicate", "hasDuplicateTitle", "i", "run", "_buildNotification", "toastComponent", "Error", "duplicate", "keepInactive", "overlayRef", "sanitizedMessage", "sanitize", "SecurityContext", "HTML", "toastPackage", "providers", "provide", "useValue", "toastInjector", "Injector", "parent", "instance", "ins", "onShown", "onHidden", "setTimeout", "push", "ToastrService_Factory", "t", "DomSanitizer", "NgZone", "Inject", "Toast", "toastrService", "options", "originalTimeout", "width", "toastClasses", "state", "displayStyle", "value", "timeout", "intervalId", "hideTime", "sub", "sub1", "sub2", "sub3", "activateToast", "count", "params", "unsubscribe", "clearInterval", "clearTimeout", "outsideTimeout", "Date", "getTime", "outsideInterval", "updateProgress", "now", "remaining", "tapToast", "stickAround", "delayedHideToast", "func", "runOutsideAngular", "runInsideAngular", "setInterval", "ɵcmp", "hostVars", "hostBindings", "Toast_HostBindings", "rf", "ctx", "Toast_mouseenter_HostBindingHandler", "Toast_mouseleave_HostBindingHandler", "NgIf", "encapsulation", "data", "animation", "trigger", "style", "opacity", "transition", "animate", "Component", "template", "animations", "preserveWhitespaces", "imports", "HostBinding", "HostListener", "DefaultGlobalConfig", "provideToastr", "makeEnvironmentProviders", "ToastrModule", "forRoot", "ngModule", "exports", "NgModule", "ToastrComponentlessModule", "ToastNoAnimation", "appRef", "tick", "ToastNoAnimation_HostBindings", "ToastNoAnimation_mouseenter_HostBindingHandler", "ToastNoAnimation_mouseleave_HostBindingHandler", "DefaultNoAnimationsGlobalConfig", "ToastNoAnimationModule"]
}
