{
  "version": 3,
  "sources": ["../../../../../projects/ngx-cookie-service/src/lib/cookie.service.ts", "../../../../../projects/ngx-cookie-service/src/public-api.ts", "../../../../../projects/ngx-cookie-service/src/ngx-cookie-service.ts"],
  "sourcesContent": ["// This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\n\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\nexport type SameSite = 'Lax' | 'None' | 'Strict';\n\nexport interface CookieOptions {\n  expires?: number | Date;\n  path?: string;\n  domain?: string;\n  secure?: boolean;\n  sameSite?: SameSite;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CookieService {\n  private readonly documentIsAccessible: boolean;\n\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    @Inject(PLATFORM_ID) private platformId\n  ) {\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n\n  /**\n   * Get cookie Regular Expression\n   *\n   * @param name Cookie name\n   * @returns property RegExp\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  private static getCookieRegExp(name: string): RegExp {\n    const escapedName: string = name.replace(/([\\[\\]{}()|=;+?,.*^$])/gi, '\\\\$1');\n\n    return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n  }\n\n  /**\n   * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n   *\n   * @param encodedURIComponent A value representing an encoded URI component.\n   *\n   * @returns The unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  private static safeDecodeURIComponent(encodedURIComponent: string): string {\n    try {\n      return decodeURIComponent(encodedURIComponent);\n    } catch {\n      // probably it is not uri encoded. return as is\n      return encodedURIComponent;\n    }\n  }\n\n  /**\n   * Return `true` if {@link Document} is accessible, otherwise return `false`\n   *\n   * @param name Cookie name\n   * @returns boolean - whether cookie with specified name exists\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  check(name: string): boolean {\n    if (!this.documentIsAccessible) {\n      return false;\n    }\n    name = encodeURIComponent(name);\n    const regExp: RegExp = CookieService.getCookieRegExp(name);\n    return regExp.test(this.document.cookie);\n  }\n\n  /**\n   * Get cookies by name\n   *\n   * @param name Cookie name\n   * @returns property value\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  get(name: string): string {\n    if (this.documentIsAccessible && this.check(name)) {\n      name = encodeURIComponent(name);\n\n      const regExp: RegExp = CookieService.getCookieRegExp(name);\n      const result: RegExpExecArray = regExp.exec(this.document.cookie);\n\n      return result[1] ? CookieService.safeDecodeURIComponent(result[1]) : '';\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Get all cookies in JSON format\n   *\n   * @returns all the cookies in json\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  getAll(): { [key: string]: string } {\n    if (!this.documentIsAccessible) {\n      return {};\n    }\n\n    const cookies: { [key: string]: string } = {};\n    const document: any = this.document;\n\n    if (document.cookie && document.cookie !== '') {\n      document.cookie.split(';').forEach((currentCookie) => {\n        const [cookieName, cookieValue] = currentCookie.split('=');\n        cookies[CookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = CookieService.safeDecodeURIComponent(cookieValue);\n      });\n    }\n\n    return cookies;\n  }\n\n  /**\n   * Set cookie based on provided information\n   *\n   * @param name     Cookie name\n   * @param value    Cookie value\n   * @param expires  Number of days until the cookies expires or an actual `Date`\n   * @param path     Cookie path\n   * @param domain   Cookie domain\n   * @param secure   Secure flag\n   * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  set(\n    name: string,\n    value: string,\n    expires?: CookieOptions['expires'],\n    path?: CookieOptions['path'],\n    domain?: CookieOptions['domain'],\n    secure?: CookieOptions['secure'],\n    sameSite?: SameSite\n  ): void;\n\n  /**\n   * Set cookie based on provided information\n   *\n   * Cookie's parameters:\n   * <pre>\n   * expires  Number of days until the cookies expires or an actual `Date`\n   * path     Cookie path\n   * domain   Cookie domain\n   * secure   Secure flag\n   * sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n   * </pre>\n   *\n   * @param name     Cookie name\n   * @param value    Cookie value\n   * @param options  Body with cookie's params\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  set(name: string, value: string, options?: CookieOptions): void;\n\n  set(\n    name: string,\n    value: string,\n    expiresOrOptions?: CookieOptions['expires'] | CookieOptions,\n    path?: CookieOptions['path'],\n    domain?: CookieOptions['domain'],\n    secure?: CookieOptions['secure'],\n    sameSite?: SameSite\n  ): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n      const optionsBody = {\n        expires: expiresOrOptions as CookieOptions['expires'],\n        path,\n        domain,\n        secure,\n        sameSite: sameSite ? sameSite : 'Lax',\n      };\n\n      this.set(name, value, optionsBody);\n      return;\n    }\n\n    let cookieString: string = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n    const options = expiresOrOptions ? expiresOrOptions : {};\n\n    if (options.expires) {\n      if (typeof options.expires === 'number') {\n        const dateExpires: Date = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n\n        cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n      } else {\n        cookieString += 'expires=' + options.expires.toUTCString() + ';';\n      }\n    }\n\n    if (options.path) {\n      cookieString += 'path=' + options.path + ';';\n    }\n\n    if (options.domain) {\n      cookieString += 'domain=' + options.domain + ';';\n    }\n\n    if (options.secure === false && options.sameSite === 'None') {\n      options.secure = true;\n      console.warn(\n        `[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n          `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`\n      );\n    }\n    if (options.secure) {\n      cookieString += 'secure;';\n    }\n\n    if (!options.sameSite) {\n      options.sameSite = 'Lax';\n    }\n\n    cookieString += 'sameSite=' + options.sameSite + ';';\n\n    this.document.cookie = cookieString;\n  }\n\n  /**\n   * Delete cookie by name\n   *\n   * @param name   Cookie name\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   * @param secure Cookie secure flag\n   * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  delete(name: string, path?: CookieOptions['path'], domain?: CookieOptions['domain'], secure?: CookieOptions['secure'], sameSite: SameSite = 'Lax'): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n    const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n    this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\n  }\n\n  /**\n   * Delete all cookies\n   *\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   * @param secure Is the Cookie secure\n   * @param sameSite Is the cookie same site\n   *\n   * @author: Stepan Suvorov\n   * @since: 1.0.0\n   */\n  deleteAll(path?: CookieOptions['path'], domain?: CookieOptions['domain'], secure?: CookieOptions['secure'], sameSite: SameSite = 'Lax'): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    const cookies: any = this.getAll();\n\n    for (const cookieName in cookies) {\n      if (cookies.hasOwnProperty(cookieName)) {\n        this.delete(cookieName, path, domain, secure, sameSite);\n      }\n    }\n  }\n}\n", "/*\n * Public API Surface of ngx-cookie-service\n */\n\nexport * from './lib/cookie.service';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],
  "mappings": "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",
  "names": ["CookieService", "constructor", "document", "platformId", "documentIsAccessible", "isPlatformBrowser", "getCookieRegExp", "name", "escapedName", "replace", "RegExp", "safeDecodeURIComponent", "encodedURIComponent", "decodeURIComponent", "check", "encodeURIComponent", "regExp", "test", "cookie", "get", "result", "exec", "getAll", "cookies", "split", "forEach", "currentCookie", "cookieName", "cookieValue", "set", "value", "expiresOrOptions", "path", "domain", "secure", "sameSite", "Date", "optionsBody", "expires", "cookieString", "options", "dateExpires", "getTime", "toUTCString", "console", "warn", "delete", "expiresDate", "deleteAll", "hasOwnProperty", "DOCUMENT", "PLATFORM_ID", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "args", "Inject"]
}
